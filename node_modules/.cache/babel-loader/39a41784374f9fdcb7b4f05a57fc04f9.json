{"remainingRequest":"E:\\Project\\chowder\\node_modules\\babel-loader\\lib\\index.js!E:\\Project\\chowder\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!E:\\Project\\chowder\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\Project\\chowder\\src\\views\\Reception\\Receptionindex.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\Project\\chowder\\src\\views\\Reception\\Receptionindex.vue","mtime":1578297571929},{"path":"E:\\Project\\chowder\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\Project\\chowder\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\Project\\chowder\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\Project\\chowder\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["Receptionindex.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2CA,OAAA,OAAA,MAAA,8BAAA,C,CACA;;AAEA,eAAA;AACA,EAAA,IAAA,EAAA,gBADA;AAGA,EAAA,KAAA,EAAA;AACA,IAAA,SAAA,EAAA;AACA;AACA,MAAA,IAAA,EAAA,MAFA;AAGA;AACA,MAAA,OAAA,YAAA,OAAA,CAAA,GAAA,CAAA,QAAA;AAJA,KADA;AAOA,IAAA,QAAA,EAAA;AACA;AACA,MAAA,IAAA,EAAA,OAFA;AAGA,MAAA,OAAA,EAAA;AAHA,KAPA;AAYA,IAAA,OAAA,EAAA;AACA;AACA,MAAA,OAAA,EAAA;AAFA,KAZA;AAgBA,IAAA,WAAA,EAAA;AACA;AACA,MAAA,OAAA,EAAA,oBAAA;AACA,eAAA,CAAA,GAAA,EAAA,CAAA,CAAA;AACA;AAJA,KAhBA;AAsBA,IAAA,KAAA,EAAA;AACA;AACA,MAAA,IAAA,EAAA,MAFA;AAGA,MAAA,OAAA,EAAA;AAHA,KAtBA;AA2BA,IAAA,MAAA,EAAA;AACA;AACA,MAAA,IAAA,EAAA,MAFA;AAGA,MAAA,OAAA,EAAA;AAHA;AA3BA,GAHA;AAoCA,EAAA,IApCA,kBAoCA;AACA,WAAA;AACA,MAAA,IAAA,EAAA,EADA;AACA;AACA,MAAA,QAAA,EAAA,EAFA;AAEA;AACA,MAAA,cAAA,EAAA,EAHA;AAGA;AACA,MAAA,UAAA,EAAA,EAJA;AAIA;AACA,MAAA,QAAA,EAAA,IALA;AAKA;AACA,MAAA,aAAA,EAAA,KANA;AAMA;AACA,MAAA,YAAA,EAAA,KAPA;AAOA;AACA,MAAA,aAAA,EAAA,KAAA,MAAA,GAAA,GARA,CAQA;;AARA,KAAA;AAUA,GA/CA;AAgDA,EAAA,OAhDA,qBAgDA;AACA,QAAA,KAAA,KAAA,CAAA,UAAA,EAAA;AACA,WAAA,KAAA,CAAA,UAAA,CAAA,MAAA;AACA;AACA,GApDA;AAqDA,EAAA,KAAA,EAAA;AACA,IAAA,OAAA,EAAA,iBAAA,GAAA,EAAA;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,GAAA,EADA,CAEA;AACA;;AACA,UAAA,GAAA,EAAA;AACA,YAAA,OAAA,KAAA,OAAA,KAAA,QAAA,EAAA;AACA,eAAA,QAAA,GAAA,GAAA;AACA,SAFA,MAEA;AACA,eAAA,UAAA,GAAA,KAAA,YAAA,CAAA,GAAA,CAAA,CADA,CAEA;AACA;AACA;AACA;AAbA,GArDA;AAoEA,EAAA,OApEA,qBAoEA;AACA,QAAA,OAAA,KAAA,OAAA,KAAA,QAAA,EAAA;AACA,WAAA,QAAA,GAAA,KAAA,OAAA;AACA,KAFA,MAEA;AACA,WAAA,UAAA,GAAA,KAAA,YAAA,CAAA,KAAA,OAAA,CAAA;AACA;AACA,GA1EA;AA2EA,EAAA,OAAA,EAAA;AACA;AACA,IAAA,aAFA,yBAEA,IAFA,EAEA;AACA;AACA,WAAA,cAAA,GAAA,IAAA,CAAA,GAAA;AACA,WAAA,aAAA,GAAA,IAAA;AACA,KANA;AAOA,IAAA,YAPA,wBAOA,IAPA,EAOA,QAPA,EAOA;AACA;AACA,WAAA,UAAA,GAAA,QAAA;AACA,WAAA,KAAA,CAAA,WAAA,EAAA,KAAA,UAAA,EAHA,CAIA;AACA,KAZA;AAaA,IAAA,SAbA,qBAaA,IAbA,EAaA,QAbA,EAaA;AACA;AACA,WAAA,YAAA,GAAA,IAAA;AACA,WAAA,IAAA,GAAA,IAAA,CAHA,CAIA;AACA,KAlBA;;AAmBA;;AAEA;AACA,IAAA,mBAtBA,+BAsBA,IAtBA,EAsBA;AAAA;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,IAAA;AACA,WAAA,cAAA,GAAA,KAAA,IAAA,CAAA,GAAA;AACA,WAAA,aAAA,GAAA,IAAA;AACA,KA1BA;AA2BA,IAAA,UA3BA,wBA2BA;AAAA;AACA,WAAA,KAAA,CAAA,QAAA,CAAA,KAAA,CAAA,OAAA,GAAA,OAAA;;AACA,UAAA,KAAA,KAAA,CAAA,UAAA,CAAA,KAAA,CAAA,OAAA,KAAA,OAAA,EAAA;AACA,aAAA,KAAA,CAAA,UAAA,CAAA,KAAA,CAAA,OAAA,GAAA,MAAA;AACA;;AACA,WAAA,KAAA,CAAA,SAAA,CAAA,KAAA,CAAA,OAAA,GAAA,KAAA;AACA,KAjCA;AAkCA,IAAA,UAlCA,wBAkCA;AACA;AACA,WAAA,KAAA,CAAA,QAAA,CAAA,KAAA,CAAA,OAAA,GAAA,MAAA;AACA,WAAA,KAAA,CAAA,SAAA,CAAA,KAAA,CAAA,OAAA,GAAA,GAAA;AACA,KAtCA;AAuCA,IAAA,UAvCA,sBAuCA,IAvCA,EAuCA,KAvCA,EAuCA;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,IAAA,EADA,CAEA;;AACA,WAAA,YAAA,GAAA,IAAA;AACA,WAAA,IAAA,GAAA,IAAA,CAJA,CAKA;AACA,KA7CA;;AA8CA;AAEA,IAAA,MAhDA;AAAA;AAAA;AAAA,iDAgDA,IAhDA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAiDA;AACA,oBAAA,CAAA,KAAA,QAAA,EAAA;AACA;AACA,uBAAA,KAAA,CAAA,SAAA,CAAA,KAAA,CAAA,OAAA,GAAA,OAAA;AACA;;AACA,gBAAA,GAtDA,GAsDA,IAAA,KAAA,EAtDA;AAuDA,gBAAA,GAAA,CAAA,GAAA,GAAA,IAAA;AACA,gBAAA,GAAA,CAAA,MAAA;AAAA;AAAA;AAAA;AAAA,yCAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA,0BAAA,IAFA,GAEA,KAAA,CAAA,aAAA,CAAA,IAAA,CAFA;AAGA,0BAAA,QAHA,GAGA,IAAA,QAAA,EAHA;AAIA,0BAAA,QAAA,CAAA,MAAA,CAAA,MAAA,EAAA,IAAA,EAAA,KAAA,CAAA,IAAA,CAAA,IAAA,EAJA,CAIA;;AACA,0BAAA,KAAA,CAAA,SAAA,CAAA,QAAA;;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAA;;AAxDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAgEA,IAAA,SAhEA;AAAA;AAAA;AAAA,iDAgEA,QAhEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAiEA,KAAA,KAAA,CAAA;AACA,kBAAA,GAAA,EAAA,gBADA;AAEA,kBAAA,MAAA,EAAA,MAFA;AAGA,kBAAA,IAAA,EAAA,QAHA;AAIA,kBAAA,OAAA,EAAA;AACA,oCAAA;AADA;AAJA,iBAAA,CAjEA;;AAAA;AAiEA,gBAAA,GAjEA;;AAyEA,oBAAA,CAAA,KAAA,QAAA,EAAA;AACA;AACA,uBAAA,KAAA,CAAA,SAAA,CAAA,KAAA,CAAA,OAAA,GAAA,MAAA;AACA;;AACA,oBAAA,GAAA,CAAA,IAAA,CAAA,IAAA,KAAA,CAAA,EAAA;AACA;AACA,kBAAA,UAFA,GAEA,GAAA,CAAA,IAAA,CAAA,GAFA;;AAGA,sBAAA,KAAA,QAAA,EAAA;AACA,yBAAA,UAAA,CAAA,IAAA,CAAA;AACA,sBAAA,GAAA,EAAA,UADA;AAEA,sBAAA,GAAA,EAAA;AAFA,qBAAA;AAIA,yBAAA,KAAA,CAAA,WAAA,EAAA,KAAA,UAAA,EALA,CAKA;AACA;AACA;AACA,mBARA,MAQA;AACA,yBAAA,KAAA,CAAA,WAAA,EAAA,UAAA;AACA;;AACA,uBAAA,KAAA,CAAA,UAAA,CAAA,UAAA,GAAA,KAAA;AACA,iBAfA,MAeA;AACA;AACA,sBAAA,CAAA,KAAA,QAAA,EAAA;AACA,yBAAA,KAAA,CAAA,UAAA,CAAA,KAAA,CAAA,OAAA,GAAA,OAAA;AACA,mBAFA,MAEA;AACA,yBAAA,UAAA,CAAA,GAAA;AACA;;AACA,uBAAA,KAAA,CAAA,UAAA,CAAA,UAAA,GAAA,KAAA;AACA;;AACA,qBAAA,YAAA,GAAA,KAAA;;AArGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAuGA,IAAA,YAvGA,wBAuGA,GAvGA,EAuGA;AACA,UAAA,MAAA,GAAA,GAAA,CAAA,GAAA,CAAA,UAAA,IAAA,EAAA,KAAA,EAAA;AACA,YAAA,OAAA,IAAA,KAAA,QAAA,EAAA;AACA,iBAAA;AACA,YAAA,GAAA,EAAA,IADA;AAEA,YAAA,GAAA,iBAAA,KAAA;AAFA,WAAA;AAIA,SALA,MAKA;AACA,iBAAA,IAAA,CAAA,GAAA;AACA;AACA,OATA,CAAA;AAUA,aAAA,MAAA;AACA,KAnHA;AAoHA,IAAA,WApHA,yBAoHA;AACA;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,KAAA,UAAA;AACA,WAAA,YAAA,GAAA,KAAA;AACA,KAxHA;AAyHA;AACA,IAAA,QA1HA,oBA0HA,GA1HA,EA0HA;AACA,UAAA,MAAA,GAAA,QAAA,CAAA,aAAA,CAAA,QAAA,CAAA;AACA,UAAA,GAAA,GAAA,MAAA,CAAA,UAAA,CAAA,IAAA,CAAA,CAFA,CAGA;;AACA,UAAA,KAAA,GAAA,GAAA,CAAA,KAAA;AACA,UAAA,MAAA,GAAA,GAAA,CAAA,MAAA;AACA,MAAA,MAAA,CAAA,KAAA,GAAA,KAAA;AACA,MAAA,MAAA,CAAA,MAAA,GAAA,MAAA,CAPA,CAQA;;AACA,MAAA,GAAA,CAAA,SAAA,GAAA,MAAA;AACA,MAAA,GAAA,CAAA,QAAA,CAAA,CAAA,EAAA,CAAA,EAAA,MAAA,CAAA,KAAA,EAAA,MAAA,CAAA,MAAA;AACA,MAAA,GAAA,CAAA,SAAA,CAAA,GAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,EAAA,MAAA,EAXA,CAYA;;AACA,UAAA,KAAA,GAAA,MAAA,CAAA,SAAA,CAAA,YAAA,EAAA,GAAA,CAAA;AACA,aAAA,KAAA;AACA,KAzIA;AA0IA;AACA,IAAA,aA3IA,yBA2IA,UA3IA,EA2IA;AACA,UAAA,UAAA;;AACA,UAAA,UAAA,CAAA,KAAA,CAAA,GAAA,EAAA,CAAA,EAAA,OAAA,CAAA,QAAA,KAAA,CAAA,EAAA;AAAA,QAAA,UAAA,GAAA,IAAA,CAAA,UAAA,CAAA,KAAA,CAAA,GAAA,EAAA,CAAA,CAAA,CAAA;AAAA,OAAA,MAAA;AAAA,QAAA,UAAA,GAAA,QAAA,CAAA,UAAA,CAAA,KAAA,CAAA,GAAA,EAAA,CAAA,CAAA,CAAA;AAAA;;AACA,UAAA,UAAA,GAAA,UAAA,CAAA,KAAA,CAAA,GAAA,EAAA,CAAA,EAAA,KAAA,CAAA,GAAA,EAAA,CAAA,EAAA,KAAA,CAAA,GAAA,EAAA,CAAA,CAAA;AACA,UAAA,EAAA,GAAA,IAAA,UAAA,CAAA,UAAA,CAAA,MAAA,CAAA;;AACA,WAAA,IAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,UAAA,CAAA,MAAA,EAAA,CAAA,EAAA,EAAA;AACA,QAAA,EAAA,CAAA,CAAA,CAAA,GAAA,UAAA,CAAA,UAAA,CAAA,CAAA,CAAA;AACA;;AACA,aAAA,IAAA,IAAA,CAAA,CAAA,EAAA,CAAA,EAAA;AAAA,QAAA,IAAA,EAAA;AAAA,OAAA,CAAA;AACA;AApJA,GA3EA;AAiOA,EAAA,UAAA,EAAA;AACA,IAAA,OAAA,EAAA;AADA;AAjOA,CAAA","sourcesContent":["<template>\r\n    <div>\r\n        <!-- 多图片上传 -->\r\n        <el-upload v-if=\"multiple\" action='string' list-type=\"picture-card\" accept=\"image/*\" :on-preview=\"handlePreview\"\r\n                   :auto-upload=\"false\" :on-remove=\"handleRemove\"\r\n                   :http-request=\"upload\" :on-change=\"consoleFL\" :file-list=\"uploadList\">\r\n            <i class=\"el-icon-plus\"></i>\r\n        </el-upload>\r\n\r\n        <!-- 单图片上传 -->\r\n        <el-upload v-else class=\"avatar-uploader\" action=\"'string'\" :auto-upload=\"false\" :show-file-list=\"false\" :on-change=\"handleCrop\"\r\n                   :http-request=\"upload\">\r\n            <img v-if=\"imageUrl\" :src=\"imageUrl\" class=\"avatar\" ref=\"singleImg\"\r\n                 @mouseenter=\"mouseEnter\" @mouseleave=\"mouseLeave\" :style=\"{width:width+'px',height:height+'px'}\">\r\n            <i v-else class=\"el-icon-plus avatar-uploader-icon\" :style=\"{width:width+'px',height:height+'px',\r\n            'line-height':height+'px','font-size':height/6+'px'}\"></i>\r\n            <!-- 单图片上传状态显示 -->\r\n            <!-- <div v-if=\"imageUrl\" class=\"reupload\" ref=\"reupload\" @click.stop=\"handlePreviewSingle\" @mouseenter=\"mouseEnter\" @mouseleave=\"mouseLeave\" :style=\"{width:reuploadWidth+'px',height:reuploadWidth+'px','line-height':reuploadWidth+'px','font-size':reuploadWidth/5+'px'}\">重新上传</div> -->\r\n            <div id=\"uploadIcon\" v-if=\"imageUrl\" ref=\"reupload\" @mouseenter=\"mouseEnter\" @mouseleave=\"mouseLeave\" :style=\"{width:'100%'}\">\r\n                <i class=\"el-icon-zoom-in\" @click.stop=\"handlePreviewSingle\" :style=\"{color:'#2E2E2E',fontSize:'25px',\r\n                display:'inline-block',paddingRight:'15px'}\"></i>\r\n                <i class=\"el-icon-upload\" :style=\"{color:'#2E2E2E',fontSize:'25px',display:'inline-block'}\"></i>\r\n            </div>\r\n            <div class=\"reupload\" ref=\"uploading\" :style=\"{width:reuploadWidth+'px',height:reuploadWidth+'px',\r\n            'line-height':reuploadWidth+'px','font-size':reuploadWidth/5+'px'}\">上传中..</div>\r\n            <div class=\"reupload\" ref=\"failUpload\" :style=\"{width:reuploadWidth+'px',height:reuploadWidth+'px',\r\n            'line-height':reuploadWidth+'px','font-size':reuploadWidth/5+'px'}\">上传失败</div>\r\n        </el-upload>\r\n\r\n        <!-- 多图片预览弹窗 -->\r\n        <el-dialog :visible.sync=\"dialogVisible\">\r\n            <img width=\"100%\" :src=\"dialogImageUrl\" alt=\"\">\r\n        </el-dialog>\r\n\r\n        <!-- 剪裁组件弹窗 -->\r\n        <el-dialog :visible.sync=\"cropperModel\" width=\"1100px\" :before-close=\"beforeClose\">\r\n            <Cropper :img-file=\"file\" ref=\"vueCropper\" :fixedNumber=\"fixedNumber\" @upload=\"upload\">\r\n            </Cropper>\r\n        </el-dialog>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n    import Cropper from '@/components/cropper/cropper';\r\n    // import Api from '@/js/api.js' //接口url配置文件\r\n\r\n    export default {\r\n        name:'Receptionindex',\r\n\r\n        props: {\r\n            targetUrl: {\r\n                // 上传地址\r\n                type: String,\r\n                // default: '/storage/upload'\r\n                default: `${process.env.API_ROOT}/sys/oss/upload`\r\n            },\r\n            multiple: {\r\n                // 多图开关\r\n                type: Boolean,\r\n                default: true\r\n            },\r\n            initUrl: {\r\n                // 初始图片链接\r\n                default: ''\r\n            },\r\n            fixedNumber: {\r\n                // 剪裁框比例设置\r\n                default: function () {\r\n                    return [1.5, 1];\r\n                }\r\n            },\r\n            width: {\r\n                // 单图剪裁框宽度\r\n                type: Number,\r\n                default: 178\r\n            },\r\n            height: {\r\n                // 单图剪裁框高度\r\n                type: Number,\r\n                default: 178\r\n            }\r\n        },\r\n        data () {\r\n            return {\r\n                file: '', // 当前被选择的图片文件\r\n                imageUrl: '', // 单图情况框内图片链接\r\n                dialogImageUrl: '', // 多图情况弹窗内图片链接\r\n                uploadList: [], // 上传图片列表\r\n                reupload: true, // 控制\"重新上传\"开关\r\n                dialogVisible: false, // 展示弹窗开关\r\n                cropperModel: false, // 剪裁组件弹窗开关\r\n                reuploadWidth: this.height * 0.7, // 动态改变”重新上传“大小\r\n            };\r\n        },\r\n        updated () {\r\n            if (this.$refs.vueCropper) {\r\n                this.$refs.vueCropper.Update();\r\n            }\r\n        },\r\n        watch: {\r\n            initUrl: function (val) {\r\n                console.log(val);\r\n                // 监听传入初始化图片\r\n                // console.info('watch');\r\n                if (val) {\r\n                    if (typeof this.initUrl === 'string') {\r\n                        this.imageUrl = val;\r\n                    } else {\r\n                        this.uploadList = this.formatImgArr(val);\r\n                        // this.$emit('imgupload', this.uploadList);\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        mounted () {\r\n            if (typeof this.initUrl === 'string') {\r\n                this.imageUrl = this.initUrl;\r\n            } else {\r\n                this.uploadList = this.formatImgArr(this.initUrl);\r\n            }\r\n        },\r\n        methods: {\r\n            /** **************************** multiple多图情况 **************************************/\r\n            handlePreview (file) {\r\n                // 点击进行图片展示\r\n                this.dialogImageUrl = file.url;\r\n                this.dialogVisible = true;\r\n            },\r\n            handleRemove (file, fileList) {\r\n                // 删除图片后更新图片文件列表并通知父级变化\r\n                this.uploadList = fileList;\r\n                this.$emit('imgupload', this.uploadList);\r\n                // this.$emit('imgupload', this.formatImgArr(this.uploadList));\r\n            },\r\n            consoleFL (file, fileList) {\r\n                // 弹出剪裁框，将当前文件设置为文件\r\n                this.cropperModel = true;\r\n                this.file = file;\r\n                // this.uploadList = fileList;\r\n            },\r\n            /************************************************************************************/\r\n\r\n            /** **************************** single单图情况 **************************************/\r\n            handlePreviewSingle (file) { // 点击进行图片展示\r\n                console.log(file);\r\n                this.dialogImageUrl = this.file.url;\r\n                this.dialogVisible = true;\r\n            },\r\n            mouseEnter () { // 鼠标划入显示“重新上传”\r\n                this.$refs.reupload.style.display = 'block';\r\n                if (this.$refs.failUpload.style.display === 'block') {\r\n                    this.$refs.failUpload.style.display = 'none';\r\n                }\r\n                this.$refs.singleImg.style.opacity = '0.6';\r\n            },\r\n            mouseLeave () {\r\n                // 鼠标划出隐藏“重新上传”\r\n                this.$refs.reupload.style.display = 'none';\r\n                this.$refs.singleImg.style.opacity = '1';\r\n            },\r\n            handleCrop (file, files) {\r\n                console.log(file);\r\n                // 点击弹出剪裁框\r\n                this.cropperModel = true;\r\n                this.file = file;\r\n                // this.imageUrl = file.url\r\n            },\r\n            /************************************************************************************/\r\n\r\n            async upload (data) {\r\n                // 自定义upload事件\r\n                if (!this.multiple) {\r\n                    // 如果单图，则显示正在上传\r\n                    this.$refs.uploading.style.display = 'block';\r\n                }\r\n                let img = new Image();\r\n                img.src = data;\r\n                img.onload = async () => {\r\n                    // let _data = this.compress(img);\r\n                    let blob = this.dataURItoBlob(data);\r\n                    let formData = new FormData();\r\n                    formData.append('file', blob, this.file.name); // 有的后台需要传文件名，不然会报错\r\n                    this.imgUpload(formData);\r\n                };\r\n            },\r\n            async imgUpload(formData) {\r\n                const res = await this.$http({\r\n                    url: 'sys/oss/upload',\r\n                    method: 'post',\r\n                    data: formData,\r\n                    headers: {\r\n                        'Content-Type': 'multipart/form-data'\r\n                    }\r\n                });\r\n                if (!this.multiple) {\r\n                    // 上传完成后隐藏正在上传\r\n                    this.$refs.uploading.style.display = 'none';\r\n                }\r\n                if (res.data.code === 0) {\r\n                    // 上传成功将照片传回父组件\r\n                    const currentPic = res.data.url;\r\n                    if (this.multiple) {\r\n                        this.uploadList.push({\r\n                            url: currentPic,\r\n                            uid: '111'\r\n                        });\r\n                        this.$emit('imgupload', this.uploadList);// 根据自己实际项目需要将照片返回给父组件\r\n                        // this.uploadList.pop();\r\n                        // this.$emit('imgupload', this.formatImgArr(this.uploadList));\r\n                    } else {\r\n                        this.$emit('imgupload', currentPic);\r\n                    }\r\n                    this.$refs.vueCropper.isDisabled = false;\r\n                } else {\r\n                    // 上传失败则显示上传失败，如多图则从图片列表删除图片\r\n                    if (!this.multiple) {\r\n                        this.$refs.failUpload.style.display = 'block';\r\n                    } else {\r\n                        this.uploadList.pop();\r\n                    }\r\n                    this.$refs.vueCropper.isDisabled = false;\r\n                }\r\n                this.cropperModel = false;\r\n            },\r\n            formatImgArr (arr) {\r\n                const result = arr.map((item, index) => {\r\n                    if (typeof item === 'string') {\r\n                        return {\r\n                            url: item,\r\n                            uid: `index${index}`\r\n                        };\r\n                    } else {\r\n                        return item.url;\r\n                    }\r\n                });\r\n                return result;\r\n            },\r\n            beforeClose () {\r\n                // this.uploadList.pop();\r\n                console.log(this.uploadList);\r\n                this.cropperModel = false;\r\n            },\r\n            // 压缩图片\r\n            compress(img) {\r\n                let canvas = document.createElement('canvas');\r\n                let ctx = canvas.getContext('2d');\r\n                // let initSize = img.src.length;\r\n                let width = img.width;\r\n                let height = img.height;\r\n                canvas.width = width;\r\n                canvas.height = height;\r\n                // 铺底色\r\n                ctx.fillStyle = '#fff';\r\n                ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n                ctx.drawImage(img, 0, 0, width, height);\r\n                // 进行压缩\r\n                let ndata = canvas.toDataURL('image/jpeg', 0.8);\r\n                return ndata;\r\n            },\r\n            // base64转成bolb对象\r\n            dataURItoBlob(base64Data) {\r\n                let byteString;\r\n                if (base64Data.split(',')[0].indexOf('base64') >= 0) { byteString = atob(base64Data.split(',')[1]); } else { byteString = unescape(base64Data.split(',')[1]); }\r\n                let mimeString = base64Data.split(',')[0].split(':')[1].split(';')[0];\r\n                let ia = new Uint8Array(byteString.length);\r\n                for (let i = 0; i < byteString.length; i++) {\r\n                    ia[i] = byteString.charCodeAt(i);\r\n                }\r\n                return new Blob([ia], { type: mimeString });\r\n            }\r\n        },\r\n        components: {\r\n            Cropper\r\n        },\r\n\r\n    }\r\n</script>\r\n\r\n\r\n<style>\r\n    .avatar-uploader .el-upload {\r\n        border: 1px dashed #d9d9d9;\r\n        border-radius: 6px;\r\n        cursor: pointer;\r\n        position: relative;\r\n        overflow: hidden;\r\n    }\r\n    .avatar-uploader .el-upload:hover {\r\n        border-color: #409eff;\r\n    }\r\n    .avatar-uploader-icon {\r\n        color: #8c939d;\r\n        text-align: center;\r\n    }\r\n    .avatar {\r\n        display: block;\r\n    }\r\n    .reupload {\r\n        border-radius: 50%;\r\n        position: absolute;\r\n        color: #fff;\r\n        background-color: #000000;\r\n        opacity: 0.6;\r\n        top: 50%;\r\n        left: 50%;\r\n        transform: translate(-50%, -50%);\r\n        display: none;\r\n    }\r\n    #uploadIcon{\r\n        position: absolute;\r\n        top: 50%;\r\n        left: 50%;\r\n        transform: translate(-50%, -50%);\r\n        display: none;\r\n    }\r\n</style>"],"sourceRoot":"src/views/Reception"}]}